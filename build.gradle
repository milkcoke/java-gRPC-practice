buildscript {
	ext {
		protobufVersion = '3.21.1'
		protobufPluginVersion = '1.52.1'
		grpcVersion = '1.52.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	// The Protobuf plugin provides protobuf compilation to your project
	id 'com.google.protobuf' version '0.9.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '18'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
}

//configurations.all {
//	exclude group: 'org.springframework.boot', module: 'spring-boot-starter:2.6.13'
//}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation ('net.devh:grpc-spring-boot-starter:2.14.0.RELEASE')

	implementation "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	// stub is a client-side component in gRPC that provides a simple wy to make remote procedure calls to a server.
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation "io.grpc:grpc-netty:${grpcVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'


//	compileProtoPath 'src/main/proto'
	compileOnly 'org.projectlombok:lombok'
	// This is since
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok:1.18.22'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// exclude all test code on build

test {
	exclude "**/*"
}

// sourceSets is a configuration that sources of project (target, generated)
sourceSets {
	main {
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}



protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}

// Deprecated!
//	generatedFilesBaseDir = "$projectDir/src/generated"
	clean {
		delete generatedFilesBaseDir
	}

	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${protobufPluginVersion}"
		}
	}

	generateProtoTasks {
		all()*.plugins {
			grpc {option 'jakarta.annotation=true'}
		}
	}
}
